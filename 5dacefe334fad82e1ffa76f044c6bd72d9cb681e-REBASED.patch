diff -up mesa-23.2.0/src/panfrost/vulkan/meson.build.17~ mesa-23.2.0/src/panfrost/vulkan/meson.build
--- mesa-23.2.0/src/panfrost/vulkan/meson.build.17~	2023-07-29 15:56:12.254837630 +0100
+++ mesa-23.2.0/src/panfrost/vulkan/meson.build	2023-07-29 15:57:33.255083616 +0100
@@ -30,6 +30,8 @@ panvk_entrypoints = custom_target(
     '--out-h', '@OUTPUT0@', '--out-c', '@OUTPUT1@', '--prefix', 'panvk',
     '--device-prefix', 'panvk_bifrost',
     '--device-prefix', 'panvk_v6', '--device-prefix', 'panvk_v7',
+    '--device-prefix', 'panvk_valhall',
+    '--device-prefix', 'panvk_v10',
     '--beta', with_vulkan_beta.to_string()
   ],
   depend_files : vk_entrypoints_gen_depend_files,
@@ -56,11 +58,14 @@ panvk_deps = []
 panvk_flags = []
 panvk_per_arch_libs = []
 
-foreach arch : ['6', '7']
-  panvk_per_arch_libs += static_library(
-    'panvk_v@0@'.format(arch),
-    [
-      panvk_entrypoints[0],
+foreach arch : ['6', '7', '10']
+  _sources = [
+    panvk_entrypoints[0],
+  ]
+
+  if arch in ['6', '7']
+    # Bifrost
+    _sources += [
       'bifrost/panvk_vX_cmd_buffer.c',
       'bifrost/panvk_vX_cs.c',
       'bifrost/panvk_vX_descriptor_set.c',
@@ -73,7 +78,16 @@ foreach arch : ['6', '7']
       'bifrost/panvk_vX_nir_lower_descriptors.c',
       'bifrost/panvk_vX_pipeline.c',
       'bifrost/panvk_vX_shader.c',
-    ],
+    ]
+  else
+    # Valhall
+    _sources += [
+    ]
+  endif
+
+  panvk_per_arch_libs += static_library(
+    'panvk_v@0@'.format(arch),
+    _sources,
     include_directories : [
       inc_include,
       inc_src,
diff -up mesa-23.2.0/src/panfrost/vulkan/panvk_device.c.17~ mesa-23.2.0/src/panfrost/vulkan/panvk_device.c
--- mesa-23.2.0/src/panfrost/vulkan/panvk_device.c.17~	2023-07-29 15:56:12.254837630 +0100
+++ mesa-23.2.0/src/panfrost/vulkan/panvk_device.c	2023-07-29 15:56:12.274837691 +0100
@@ -292,7 +292,9 @@ panvk_physical_device_finish(struct panv
 {
    panvk_wsi_finish(device);
 
-   panvk_arch_dispatch(device->pdev.arch, meta_cleanup, device);
+   if (device->pdev.arch <= 7)
+      panvk_bi_arch_dispatch(device->pdev.arch, meta_cleanup, device);
+
    panfrost_close_device(&device->pdev);
    if (device->master_fd != -1)
       close(device->master_fd);
@@ -398,7 +400,8 @@ panvk_physical_device_init(struct panvk_
                        path);
    }
 
-   if (strcmp(version->name, "panfrost")) {
+   if (strcmp(version->name, "panfrost") &&
+       strcmp(version->name, "pancsf")) {
       drmFreeVersion(version);
       close(fd);
       return vk_errorf(instance, VK_ERROR_INCOMPATIBLE_DRIVER,
@@ -455,7 +458,8 @@ panvk_physical_device_init(struct panvk_
       goto fail;
    }
 
-   panvk_arch_dispatch(device->pdev.arch, meta_init, device);
+   if (device->pdev.arch <= 7)
+      panvk_bi_arch_dispatch(device->pdev.arch, meta_init, device);
 
    memset(device->name, 0, sizeof(device->name));
    sprintf(device->name, "%s", device->pdev.model->name);
@@ -813,6 +817,9 @@ panvk_queue_init(struct panvk_device *de
    case 7:
       queue->vk.driver_submit = panvk_v7_queue_submit;
       break;
+   case 10:
+      // TODO: queue->vk.driver_submit = panvk_v10_queue_submit;
+      break;
    default:
       unreachable("Invalid arch");
    }
@@ -856,6 +863,11 @@ panvk_CreateDevice(VkPhysicalDevice phys
       dev_entrypoints = &panvk_v7_device_entrypoints;
       cmd_buffer_ops = &panvk_v7_cmd_buffer_ops;
       break;
+   case 10:
+      base_dev_entrypoints = &panvk_valhall_device_entrypoints;
+      dev_entrypoints = &panvk_v10_device_entrypoints;
+      cmd_buffer_ops = NULL; // TODO: &panvk_v10_cmd_buffer_ops;
+      break;
    default:
       unreachable("Unsupported architecture");
    }
diff -up mesa-23.2.0/src/panfrost/vulkan/panvk_private.h.17~ mesa-23.2.0/src/panfrost/vulkan/panvk_private.h
--- mesa-23.2.0/src/panfrost/vulkan/panvk_private.h.17~	2023-07-29 15:56:12.254837630 +0100
+++ mesa-23.2.0/src/panfrost/vulkan/panvk_private.h	2023-07-29 15:56:12.284837722 +0100
@@ -1050,7 +1050,7 @@ VK_DEFINE_NONDISP_HANDLE_CASTS(panvk_sam
 
 #define panvk_arch_name(name, version) panvk_##version##_##name
 
-#define panvk_arch_dispatch(arch, name, ...)                                   \
+#define panvk_bi_arch_dispatch(arch, name, ...)                                \
    do {                                                                        \
       switch (arch) {                                                          \
       case 6:                                                                  \
@@ -1065,16 +1065,22 @@ VK_DEFINE_NONDISP_HANDLE_CASTS(panvk_sam
    } while (0)
 
 #ifdef PAN_ARCH
+
 #if PAN_ARCH == 6
 #define panvk_per_arch(name) panvk_arch_name(name, v6)
 #elif PAN_ARCH == 7
 #define panvk_per_arch(name) panvk_arch_name(name, v7)
+#elif PAN_ARCH == 10
+#define panvk_per_arch(name) panvk_arch_name(name, v10)
 #endif
+
 #include "bifrost/panvk_vX_cmd_buffer.h"
 #include "bifrost/panvk_vX_cs.h"
 #include "bifrost/panvk_vX_device.h"
 #include "bifrost/panvk_vX_meta.h"
+
 #else
+
 #define PAN_ARCH             6
 #define panvk_per_arch(name) panvk_arch_name(name, v6)
 #include "bifrost/panvk_vX_cmd_buffer.h"
@@ -1083,6 +1089,7 @@ VK_DEFINE_NONDISP_HANDLE_CASTS(panvk_sam
 #include "bifrost/panvk_vX_meta.h"
 #undef PAN_ARCH
 #undef panvk_per_arch
+
 #define PAN_ARCH             7
 #define panvk_per_arch(name) panvk_arch_name(name, v7)
 #include "bifrost/panvk_vX_cmd_buffer.h"
@@ -1091,6 +1098,13 @@ VK_DEFINE_NONDISP_HANDLE_CASTS(panvk_sam
 #include "bifrost/panvk_vX_meta.h"
 #undef PAN_ARCH
 #undef panvk_per_arch
+
+#define PAN_ARCH             10
+#define panvk_per_arch(name) panvk_arch_name(name, v10)
+/* TODO */
+#undef PAN_ARCH
+#undef panvk_per_arch
+
 #endif
 
 #ifdef PAN_ARCH
