From 080fb1ae5fdf222b8fa1a99563416fb7f26bc00f Mon Sep 17 00:00:00 2001
From: Erik Faye-Lund <erik.faye-lund@collabora.com>
Date: Thu, 29 Jun 2023 13:12:17 +0000
Subject: [PATCH] panvk: start doing device-stubs

---
 src/panfrost/vulkan/meson.build               |   3 +
 src/panfrost/vulkan/panvk_device.c            |   4 +-
 src/panfrost/vulkan/panvk_private.h           |   6 +-
 .../vulkan/valhall/panvk_vX_cmd_buffer.c      | 136 ++++++++++++++++++
 .../vulkan/valhall/panvk_vX_cmd_buffer.h      |  35 +++++
 .../vulkan/valhall/panvk_vX_descriptor_set.c  |  35 +++++
 src/panfrost/vulkan/valhall/panvk_vX_device.c |  39 +++++
 src/panfrost/vulkan/valhall/panvk_vX_device.h |  33 +++++
 8 files changed, 288 insertions(+), 3 deletions(-)
 create mode 100644 src/panfrost/vulkan/valhall/panvk_vX_cmd_buffer.c
 create mode 100644 src/panfrost/vulkan/valhall/panvk_vX_cmd_buffer.h
 create mode 100644 src/panfrost/vulkan/valhall/panvk_vX_descriptor_set.c
 create mode 100644 src/panfrost/vulkan/valhall/panvk_vX_device.c
 create mode 100644 src/panfrost/vulkan/valhall/panvk_vX_device.h

diff --git a/src/panfrost/vulkan/meson.build b/src/panfrost/vulkan/meson.build
index b54d12914b1..227dd38ccc0 100644
--- a/src/panfrost/vulkan/meson.build
+++ b/src/panfrost/vulkan/meson.build
@@ -82,6 +82,9 @@ foreach arch : ['6', '7', '10']
   else
     # Valhall
     _sources += [
+      'valhall/panvk_vX_cmd_buffer.c',
+      'valhall/panvk_vX_descriptor_set.c',
+      'valhall/panvk_vX_device.c',
     ]
   endif
 
diff --git a/src/panfrost/vulkan/panvk_device.c b/src/panfrost/vulkan/panvk_device.c
index a5513e0de99..a823c5b617d 100644
--- a/src/panfrost/vulkan/panvk_device.c
+++ b/src/panfrost/vulkan/panvk_device.c
@@ -819,7 +819,7 @@ panvk_queue_init(struct panvk_device *device, struct panvk_queue *queue,
       queue->vk.driver_submit = panvk_v7_queue_submit;
       break;
    case 10:
-      // TODO: queue->vk.driver_submit = panvk_v10_queue_submit;
+      queue->vk.driver_submit = panvk_v10_queue_submit;
       break;
    default:
       unreachable("Invalid arch");
@@ -867,7 +867,7 @@ panvk_CreateDevice(VkPhysicalDevice physicalDevice,
    case 10:
       base_dev_entrypoints = &panvk_valhall_device_entrypoints;
       dev_entrypoints = &panvk_v10_device_entrypoints;
-      cmd_buffer_ops = NULL; // TODO: &panvk_v10_cmd_buffer_ops;
+      cmd_buffer_ops = &panvk_v10_cmd_buffer_ops;
       break;
    default:
       unreachable("Unsupported architecture");
diff --git a/src/panfrost/vulkan/panvk_private.h b/src/panfrost/vulkan/panvk_private.h
index ee2fd7904f5..510deb71b03 100644
--- a/src/panfrost/vulkan/panvk_private.h
+++ b/src/panfrost/vulkan/panvk_private.h
@@ -1085,6 +1085,9 @@ VK_DEFINE_NONDISP_HANDLE_CASTS(panvk_sampler, base, VkSampler,
 #include "bifrost/panvk_vX_device.h"
 #include "bifrost/panvk_vX_meta.h"
 
+#include "valhall/panvk_vX_device.h"
+#include "valhall/panvk_vX_cmd_buffer.h"
+
 #else
 
 #define PAN_ARCH             6
@@ -1107,7 +1110,8 @@ VK_DEFINE_NONDISP_HANDLE_CASTS(panvk_sampler, base, VkSampler,
 
 #define PAN_ARCH             10
 #define panvk_per_arch(name) panvk_arch_name(name, v10)
-/* TODO */
+#include "valhall/panvk_vX_device.h"
+#include "valhall/panvk_vX_cmd_buffer.h"
 #undef PAN_ARCH
 #undef panvk_per_arch
 
diff --git a/src/panfrost/vulkan/valhall/panvk_vX_cmd_buffer.c b/src/panfrost/vulkan/valhall/panvk_vX_cmd_buffer.c
new file mode 100644
index 00000000000..d1b9f1f1022
--- /dev/null
+++ b/src/panfrost/vulkan/valhall/panvk_vX_cmd_buffer.c
@@ -0,0 +1,136 @@
+/*
+ * Copyright Â© 2023 Collabora Ltd.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice (including the next
+ * paragraph) shall be included in all copies or substantial portions of the
+ * Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+ * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+ * DEALINGS IN THE SOFTWARE.
+ */
+
+#include "genxml/gen_macros.h"
+
+#include "panvk_private.h"
+
+#include "util/rounding.h"
+#include "util/u_pack_color.h"
+#include "vk_format.h"
+
+static uint32_t
+panvk_debug_adjust_bo_flags(const struct panvk_device *device,
+                            uint32_t bo_flags)
+{
+   uint32_t debug_flags = device->physical_device->instance->debug_flags;
+
+   if (debug_flags & PANVK_DEBUG_DUMP)
+      bo_flags &= ~PAN_BO_INVISIBLE;
+
+   return bo_flags;
+}
+
+static VkResult
+panvk_create_cmdbuf(struct vk_command_pool *vk_pool,
+                    struct vk_command_buffer **cmdbuf_out)
+{
+   struct panvk_device *device =
+      container_of(vk_pool->base.device, struct panvk_device, vk);
+   struct panvk_cmd_pool *pool =
+      container_of(vk_pool, struct panvk_cmd_pool, vk);
+   struct panvk_cmd_buffer *cmdbuf;
+
+   cmdbuf = vk_zalloc(&device->vk.alloc, sizeof(*cmdbuf), 8,
+                      VK_SYSTEM_ALLOCATION_SCOPE_OBJECT);
+   if (!cmdbuf)
+      return vk_error(device, VK_ERROR_OUT_OF_HOST_MEMORY);
+
+   VkResult result = vk_command_buffer_init(&pool->vk, &cmdbuf->vk,
+                                            &panvk_per_arch(cmd_buffer_ops), 0);
+   if (result != VK_SUCCESS) {
+      vk_free(&device->vk.alloc, cmdbuf);
+      return result;
+   }
+
+   cmdbuf->device = device;
+
+   panvk_pool_init(&cmdbuf->desc_pool, &device->physical_device->pdev,
+                   &pool->desc_bo_pool, 0, 64 * 1024,
+                   "Command buffer descriptor pool", true);
+   panvk_pool_init(&cmdbuf->tls_pool, &device->physical_device->pdev,
+                   &pool->tls_bo_pool,
+                   panvk_debug_adjust_bo_flags(device, PAN_BO_INVISIBLE),
+                   64 * 1024, "TLS pool", false);
+   panvk_pool_init(&cmdbuf->varying_pool, &device->physical_device->pdev,
+                   &pool->varying_bo_pool,
+                   panvk_debug_adjust_bo_flags(device, PAN_BO_INVISIBLE),
+                   64 * 1024, "Varyings pool", false);
+   list_inithead(&cmdbuf->batches);
+   *cmdbuf_out = &cmdbuf->vk;
+   return VK_SUCCESS;
+}
+
+static void
+panvk_reset_cmdbuf(struct vk_command_buffer *vk_cmdbuf,
+                   VkCommandBufferResetFlags flags)
+{
+   struct panvk_cmd_buffer *cmdbuf =
+      container_of(vk_cmdbuf, struct panvk_cmd_buffer, vk);
+
+   vk_command_buffer_reset(&cmdbuf->vk);
+
+   list_for_each_entry_safe(struct panvk_batch, batch, &cmdbuf->batches, node) {
+      list_del(&batch->node);
+      util_dynarray_fini(&batch->jobs);
+      util_dynarray_fini(&batch->event_ops);
+
+      vk_free(&cmdbuf->vk.pool->alloc, batch);
+   }
+
+   panvk_pool_reset(&cmdbuf->desc_pool);
+   panvk_pool_reset(&cmdbuf->tls_pool);
+   panvk_pool_reset(&cmdbuf->varying_pool);
+
+   for (unsigned i = 0; i < MAX_BIND_POINTS; i++)
+      memset(&cmdbuf->bind_points[i].desc_state.sets, 0,
+             sizeof(cmdbuf->bind_points[0].desc_state.sets));
+}
+
+static void
+panvk_destroy_cmdbuf(struct vk_command_buffer *vk_cmdbuf)
+{
+   struct panvk_cmd_buffer *cmdbuf =
+      container_of(vk_cmdbuf, struct panvk_cmd_buffer, vk);
+   struct panvk_device *device = cmdbuf->device;
+
+   list_for_each_entry_safe(struct panvk_batch, batch, &cmdbuf->batches, node) {
+      list_del(&batch->node);
+      util_dynarray_fini(&batch->jobs);
+      util_dynarray_fini(&batch->event_ops);
+
+      vk_free(&cmdbuf->vk.pool->alloc, batch);
+   }
+
+   panvk_pool_cleanup(&cmdbuf->desc_pool);
+   panvk_pool_cleanup(&cmdbuf->tls_pool);
+   panvk_pool_cleanup(&cmdbuf->varying_pool);
+   vk_command_buffer_finish(&cmdbuf->vk);
+   vk_free(&device->vk.alloc, cmdbuf);
+}
+
+const struct vk_command_buffer_ops panvk_per_arch(cmd_buffer_ops) = {
+   .create = panvk_create_cmdbuf,
+   .reset = panvk_reset_cmdbuf,
+   .destroy = panvk_destroy_cmdbuf,
+};
diff --git a/src/panfrost/vulkan/valhall/panvk_vX_cmd_buffer.h b/src/panfrost/vulkan/valhall/panvk_vX_cmd_buffer.h
new file mode 100644
index 00000000000..0ab85e21644
--- /dev/null
+++ b/src/panfrost/vulkan/valhall/panvk_vX_cmd_buffer.h
@@ -0,0 +1,35 @@
+/*
+ * Copyright (C) 2023 Collabora Ltd.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice (including the next
+ * paragraph) shall be included in all copies or substantial portions of the
+ * Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+ * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+ * DEALINGS IN THE SOFTWARE.
+ */
+
+#ifndef PANVK_PRIVATE_H
+#error "Must be included from panvk_private.h"
+#endif
+
+#ifndef PAN_ARCH
+#error "no arch"
+#endif
+
+#include "compiler/shader_enums.h"
+#include <vulkan/vulkan.h>
+
+extern const struct vk_command_buffer_ops panvk_per_arch(cmd_buffer_ops);
diff --git a/src/panfrost/vulkan/valhall/panvk_vX_descriptor_set.c b/src/panfrost/vulkan/valhall/panvk_vX_descriptor_set.c
new file mode 100644
index 00000000000..455731e0050
--- /dev/null
+++ b/src/panfrost/vulkan/valhall/panvk_vX_descriptor_set.c
@@ -0,0 +1,35 @@
+/*
+ * Copyright Â© 2023 Collabora Ltd.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice (including the next
+ * paragraph) shall be included in all copies or substantial portions of the
+ * Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+ * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+ * DEALINGS IN THE SOFTWARE.
+ */
+
+#include "genxml/gen_macros.h"
+
+#include "panvk_private.h"
+
+VkResult
+panvk_per_arch(CreateDescriptorSetLayout)(
+   VkDevice _device, const VkDescriptorSetLayoutCreateInfo *pCreateInfo,
+   const VkAllocationCallbacks *pAllocator, VkDescriptorSetLayout *pSetLayout)
+{
+   panvk_stub();
+   return VK_SUCCESS;
+}
diff --git a/src/panfrost/vulkan/valhall/panvk_vX_device.c b/src/panfrost/vulkan/valhall/panvk_vX_device.c
new file mode 100644
index 00000000000..4dcce520194
--- /dev/null
+++ b/src/panfrost/vulkan/valhall/panvk_vX_device.c
@@ -0,0 +1,39 @@
+/*
+ * Copyright Â© 2023 Collabora Ltd.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice (including the next
+ * paragraph) shall be included in all copies or substantial portions of the
+ * Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+ * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+ * DEALINGS IN THE SOFTWARE.
+ */
+
+#include "genxml/gen_macros.h"
+
+#include "decode.h"
+
+#include "panvk_cs.h"
+#include "panvk_private.h"
+
+#include "vk_drm_syncobj.h"
+
+VkResult
+panvk_per_arch(queue_submit)(struct vk_queue *vk_queue,
+                             struct vk_queue_submit *submit)
+{
+   panvk_stub();
+   return VK_ERROR_UNKNOWN;
+}
diff --git a/src/panfrost/vulkan/valhall/panvk_vX_device.h b/src/panfrost/vulkan/valhall/panvk_vX_device.h
new file mode 100644
index 00000000000..894f1a3b2e4
--- /dev/null
+++ b/src/panfrost/vulkan/valhall/panvk_vX_device.h
@@ -0,0 +1,33 @@
+/*
+ * Copyright (C) 2023 Collabora Ltd.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice (including the next
+ * paragraph) shall be included in all copies or substantial portions of the
+ * Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+ * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+ * DEALINGS IN THE SOFTWARE.
+ */
+
+#ifndef PANVK_PRIVATE_H
+#error "Must be included from panvk_private.h"
+#endif
+
+#ifndef PAN_ARCH
+#error "no arch"
+#endif
+
+VkResult panvk_per_arch(queue_submit)(struct vk_queue *queue,
+                                      struct vk_queue_submit *submit);
-- 
GitLab

