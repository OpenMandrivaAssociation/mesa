From 24e42af650730374f8a0958d2f6686b0b089843f Mon Sep 17 00:00:00 2001
From: Boris Brezillon <boris.brezillon@collabora.com>
Date: Thu, 13 Apr 2023 14:43:20 +0200
Subject: [PATCH] heap fixes

---
 src/gallium/drivers/panfrost/pan_cmdstream.c | 55 +++++++++++++-------
 src/gallium/drivers/panfrost/pan_context.c   |  1 +
 src/gallium/drivers/panfrost/pan_context.h   |  1 +
 src/panfrost/lib/genxml/ceu_builder.h        | 15 ++++++
 src/panfrost/lib/genxml/decode.c             | 54 ++++---------------
 src/panfrost/lib/genxml/v10.xml              |  8 ++-
 src/panfrost/lib/pan_cs.c                    |  6 +--
 src/panfrost/lib/pan_cs.h                    |  2 +-
 8 files changed, 72 insertions(+), 70 deletions(-)

diff --git a/src/gallium/drivers/panfrost/pan_cmdstream.c b/src/gallium/drivers/panfrost/pan_cmdstream.c
index 3da9d299474..cc73700056a 100644
--- a/src/gallium/drivers/panfrost/pan_cmdstream.c
+++ b/src/gallium/drivers/panfrost/pan_cmdstream.c
@@ -2694,10 +2694,6 @@ panfrost_emit_heap_set(struct panfrost_batch *batch, bool vt)
    ceu_move64_to(b, heap, batch->ctx->heap.tiler_heap_ctx_gpu_va);
    ceu_heap_set(b, heap);
 
-   dev->tiler_heap->ptr.cpu = NULL;
-   dev->tiler_heap->ptr.gpu = batch->ctx->heap.first_heap_chunk_gpu_va;
-   dev->tiler_heap->size = 2097152;
-
    if (vt) {
       /* Set up the statistics */
       ceu_vt_start(b);
@@ -2782,7 +2778,7 @@ emit_fragment_job(struct panfrost_batch *batch, const struct pan_fb_info *pfb)
    if (batch->draws) {
       /* Finish tiling and wait for IDVS and tiling */
       ceu_finish_tiling(b);
-      ceu_wait_slots(b, 0xFF);
+      ceu_wait_slot(b, 2);
       ceu_vt_end(b);
    }
 
@@ -2794,10 +2790,20 @@ emit_fragment_job(struct panfrost_batch *batch, const struct pan_fb_info *pfb)
 
    /* Run the fragment job and wait */
    ceu_run_fragment(b, false);
-   ceu_wait_slots(b, 0xff);
-   /* TODO: finish_fragment */
-
-   //        ceu_frag_end(b);
+   ceu_wait_slot(b, 2);
+
+   /* Gather freed heap chunks and add them to the heap context free list
+    * so they can be re-used next time the tiler heap runs out of chunks.
+    * That's what ceu_finish_fragment() is all about. The list of freed
+    * chunks is in the tiler context descriptor
+    * (completed_{top,bottom fields}). */
+   if (batch->tiler_ctx.bifrost.ctx) {
+      ceu_move64_to(b, ceu_reg64(b, 94), batch->tiler_ctx.bifrost.ctx);
+      ceu_load_to(b, ceu_reg_tuple(b, 90, 4), ceu_reg64(b, 94), BITFIELD_MASK(4), 40);
+      ceu_wait_slot(b, 0);
+      ceu_finish_fragment(b, true, ceu_reg64(b, 90), ceu_reg64(b, 92), 0x0, 1);
+      ceu_wait_slot(b, 1);
+   }
 
    panfrost_emit_batch_end(batch);
    return 0;
@@ -3082,26 +3088,37 @@ panfrost_batch_get_bifrost_tiler(struct panfrost_batch *batch,
    if (batch->tiler_ctx.bifrost.ctx)
       return batch->tiler_ctx.bifrost.ctx;
 
-   /* Allocate the position FIFO and the tiler heap descriptor.
-    * Don't know what the extra 4k are for. */
-   size_t size =
-      POSITION_FIFO_SIZE + ALIGN(pan_size(TILER_CONTEXT), 4096) + 4096;
    struct panfrost_ptr t =
-      pan_pool_alloc_aligned(&batch->pool.base, size, POSITION_FIFO_SIZE);
+      pan_pool_alloc_aligned(&batch->pool.base, POSITION_FIFO_SIZE, POSITION_FIFO_SIZE);
 
-   /* XXX: unnecessary */
-   memset(t.cpu, 0, size);
+   mali_ptr heap, geom_buf = t.gpu;
 
-   GENX(pan_emit_tiler_heap)(dev, (uint8_t *)t.cpu + POSITION_FIFO_SIZE);
+#if PAN_ARCH >= 10
+   if (!batch->ctx->heap.desc_bo) {
+      batch->ctx->heap.desc_bo =
+         panfrost_bo_create(pan_device(batch->ctx->base.screen), pan_size(TILER_HEAP),
+                            0, "Tiler Heap");
+      pan_pack(batch->ctx->heap.desc_bo->ptr.cpu, TILER_HEAP, heap) {
+         heap.size = 2 * 1024 * 1024;
+         heap.base = batch->ctx->heap.first_heap_chunk_gpu_va;
+         heap.bottom = heap.base + 64;
+         heap.top = heap.base + heap.size;
+      }
+   }
+   heap = batch->ctx->heap.desc_bo->ptr.gpu;
+#else
+   t = pan_pool_alloc_desc(&batch->pool.base, TILER_HEAP);
+   GENX(pan_emit_tiler_heap)(dev, (uint8_t *)t.cpu);
+   heap = t.gpu;
+#endif
 
-   mali_ptr heap = t.gpu + POSITION_FIFO_SIZE;
    batch->tiler_ctx.bifrost.heap = heap;
 
    t = pan_pool_alloc_desc(&batch->pool.base, TILER_CONTEXT);
    GENX(pan_emit_tiler_ctx)
    (dev, batch->key.width, batch->key.height,
     util_framebuffer_get_num_samples(&batch->key),
-    pan_tristate_get(batch->first_provoking_vertex), heap, t.cpu);
+    pan_tristate_get(batch->first_provoking_vertex), heap, geom_buf, t.cpu);
 
    batch->tiler_ctx.bifrost.ctx = t.gpu;
    return batch->tiler_ctx.bifrost.ctx;
diff --git a/src/gallium/drivers/panfrost/pan_context.c b/src/gallium/drivers/panfrost/pan_context.c
index f4763631d0c..70dff8989c2 100644
--- a/src/gallium/drivers/panfrost/pan_context.c
+++ b/src/gallium/drivers/panfrost/pan_context.c
@@ -561,6 +561,7 @@ panfrost_cleanup_cs_queue(struct panfrost_context *ctx)
    };
    int ret = drmIoctl(dev->fd, DRM_IOCTL_PANCSF_TILER_HEAP_DESTROY, &thd);
    assert(!ret);
+   panfrost_bo_unreference(ctx->heap.desc_bo);
 
    struct drm_pancsf_group_destroy gd = {
       .group_handle = ctx->group.handle,
diff --git a/src/gallium/drivers/panfrost/pan_context.h b/src/gallium/drivers/panfrost/pan_context.h
index 3c1aef26554..b292b910597 100644
--- a/src/gallium/drivers/panfrost/pan_context.h
+++ b/src/gallium/drivers/panfrost/pan_context.h
@@ -236,6 +236,7 @@ struct panfrost_context {
       uint32_t handle;
       mali_ptr tiler_heap_ctx_gpu_va;
       mali_ptr first_heap_chunk_gpu_va;
+      struct panfrost_bo *desc_bo;
    } heap;
 };
 
diff --git a/src/panfrost/lib/genxml/ceu_builder.h b/src/panfrost/lib/genxml/ceu_builder.h
index 9f64a5a653a..f763fc11848 100644
--- a/src/panfrost/lib/genxml/ceu_builder.h
+++ b/src/panfrost/lib/genxml/ceu_builder.h
@@ -336,6 +336,21 @@ ceu_finish_tiling(ceu_builder *b)
    ceu_emit(b, FINISH_TILING, _);
 }
 
+static inline void
+ceu_finish_fragment(ceu_builder *b, bool increment_frag_completed,
+                    ceu_index first_free_heap_chunk,
+                    ceu_index last_free_heap_chunk,
+                    uint16_t scoreboard_mask, uint8_t signal_slot)
+{
+   ceu_emit(b, FINISH_FRAGMENT, I) {
+      I.increment_fragment_completed = increment_frag_completed;
+      I.wait_mask = scoreboard_mask;
+      I.first_heap_chunk = ceu_to_reg64(first_free_heap_chunk);
+      I.last_heap_chunk = ceu_to_reg64(last_free_heap_chunk);
+      I.scoreboard_entry = signal_slot;
+   }
+}
+
 static inline void
 ceu_heap_set(ceu_builder *b, ceu_index address)
 {
diff --git a/src/panfrost/lib/genxml/decode.c b/src/panfrost/lib/genxml/decode.c
index 58ad02571b7..00059de350f 100644
--- a/src/panfrost/lib/genxml/decode.c
+++ b/src/panfrost/lib/genxml/decode.c
@@ -332,69 +332,33 @@ GENX(pandecode_tiler)(mali_ptr gpu_va, unsigned gpu_id)
    DUMP_UNPACKED(TILER_CONTEXT, t, "Tiler Context @%" PRIx64 ":\n", gpu_va);
 
 #if PAN_ARCH >= 10
-   if (t.heap) {
-      mali_ptr heap = t.heap;
-      mali_ptr heap_prefix_ptr = heap - 0x10000;
-      const uint32_t *PANDECODE_PTR_VAR(heap_prefix, heap_prefix_ptr);
+   if (t.geometry_buffer) {
+      mali_ptr geom_buf = t.geometry_buffer;
+      const uint32_t *PANDECODE_PTR_VAR(pos_fifo, geom_buf);
       bool repeat_pattern_printed = false;
 
-      pandecode_log("Position FIFO %lx:\n", heap_prefix_ptr);
+      pandecode_log("Position FIFO %lx:\n", geom_buf);
       pandecode_indent++;
       for (unsigned i = 0; i < 0x10000 / 4; i += 4) {
          bool first = i == 0;
          bool last = i == ((0x10000 / 4) - 4);
 
          if (!first && !last &&
-             !memcmp(&heap_prefix[i], &heap_prefix[i - 4],
-                     sizeof(*heap_prefix) * 4)) {
-            if (!repeat_pattern_printed) {
-               pandecode_log("*\n");
-               repeat_pattern_printed = true;
-            }
-         } else {
-            pandecode_log("0x%x: %08x %08x %08x %08x\n", i * 4, heap_prefix[i],
-                          heap_prefix[i + 1], heap_prefix[i + 2],
-                          heap_prefix[i + 3]);
-            repeat_pattern_printed = false;
-         }
-      }
-      pandecode_indent--;
-
-      mali_ptr heap_postfix_ptr = heap + 0x40;
-      const uint32_t *PANDECODE_PTR_VAR(heap_postfix, heap_postfix_ptr);
-      pandecode_log("Pointer Array %lx:\n", heap_postfix_ptr);
-      pandecode_indent++;
-      repeat_pattern_printed = false;
-      for (unsigned i = 0; i < (0x2000 - 0x40) / 4; i += 4) {
-         bool first = i == 0;
-         bool last = i == (((0x2000 - 0x40) / 4) - 4);
-
-         if (!first && !last &&
-             !memcmp(&heap_postfix[i], &heap_postfix[i - 4],
-                     sizeof(*heap_postfix) * 4)) {
+             !memcmp(&pos_fifo[i], &pos_fifo[i - 4],
+                     sizeof(*pos_fifo) * 4)) {
             if (!repeat_pattern_printed) {
                pandecode_log("*\n");
                repeat_pattern_printed = true;
             }
          } else {
-            pandecode_log("0x%x: %08x %08x %08x %08x\n", i * 4, heap_postfix[i],
-                          heap_postfix[i + 1], heap_postfix[i + 2],
-                          heap_postfix[i + 3]);
+            pandecode_log("0x%x: %08x %08x %08x %08x\n", i * 4, pos_fifo[i],
+                          pos_fifo[i + 1], pos_fifo[i + 2],
+                          pos_fifo[i + 3]);
             repeat_pattern_printed = false;
          }
       }
       pandecode_indent--;
-
-      //		pandecode_print_refs_to(heap_prefix_ptr);
    }
-
-   // pandecode_print_refs_to(gpu_va + 0x40);
-/*
-        uint32_t *words = PANDECODE_PTR(gpu_va, void) + 64;
-        mprotect((void*)((uintptr_t)words & ~4095ull), 4096, PROT_READ |
-   PROT_WRITE); for (unsigned i = 0; i < 16; i++) words[i] = 0;
-        mprotect((void*)((uintptr_t)words & ~4095ull), 4096, PROT_READ);
-*/
 #endif
 }
 #endif
diff --git a/src/panfrost/lib/genxml/v10.xml b/src/panfrost/lib/genxml/v10.xml
index a51c8eeeaf2..f97cf5b24f7 100644
--- a/src/panfrost/lib/genxml/v10.xml
+++ b/src/panfrost/lib/genxml/v10.xml
@@ -570,6 +570,7 @@
   <struct name="CEU RUN_COMPUTE" size="2">
     <field name="Task increment" size="14" start="0" type="uint"/>
     <field name="Task axis" size="2" start="14" type="Task Axis"/>
+    <field name="Progress increment" size="1" start="32" type="bool" default="true"/>
     <field name="SRT select" size="2" start="40" type="uint"/>
     <field name="SPD select" size="2" start="42" type="uint"/>
     <field name="TSD select" size="2" start="44" type="uint"/>
@@ -579,6 +580,7 @@
 
   <struct name="CEU RUN_IDVS" size="2">
     <field name="Flags override" size="32" start="0" type="hex"/>
+    <field name="Progress increment" size="1" start="32" type="bool" default="true"/>
     <field name="Malloc enable" size="1" start="33" type="bool"/>
     <field name="Draw ID register enable" size="1" start="34" type="bool"/>
     <field name="Varying SRT select" size="1" start="35" type="bool"/>
@@ -592,18 +594,20 @@
 
   <struct name="CEU RUN_FRAGMENT" size="2">
     <field name="Enable TEM" size="1" start="0" type="bool"/>
+    <field name="Progress increment" size="1" start="32" type="bool" default="true"/>
     <field name="Opcode" size="8" start="56" type="CEU Opcode" default="RUN_FRAGMENT"/>
   </struct>
 
   <struct name="CEU FINISH_TILING" size="2">
+    <field name="Progress increment" size="1" start="32" type="bool" default="true"/>
     <field name="Opcode" size="8" start="56" type="CEU Opcode" default="FINISH_TILING"/>
   </struct>
 
   <struct name="CEU FINISH_FRAGMENT" size="2">
     <field name="Increment Fragment Completed" size="1" start="0" type="bool"/>
     <field name="Wait mask" size="16" start="16" type="hex"/>
-    <field name="First Heap Chunk" size="8" start="32" type="hex"/>
-    <field name="Last Heap Chunk" size="8" start="40" type="hex"/>
+    <field name="Last Heap Chunk" size="8" start="32" type="hex"/>
+    <field name="First Heap Chunk" size="8" start="40" type="hex"/>
     <field name="Scoreboard entry" size="4" start="48" type="hex"/>
     <field name="Opcode" size="8" start="56" type="CEU Opcode" default="FINISH_FRAGMENT"/>
   </struct>
diff --git a/src/panfrost/lib/pan_cs.c b/src/panfrost/lib/pan_cs.c
index 84c5b9d4f71..280a68ce683 100644
--- a/src/panfrost/lib/pan_cs.c
+++ b/src/panfrost/lib/pan_cs.c
@@ -968,7 +968,8 @@ GENX(pan_emit_tiler_heap)(const struct panfrost_device *dev, void *out)
 void
 GENX(pan_emit_tiler_ctx)(const struct panfrost_device *dev, unsigned fb_width,
                          unsigned fb_height, unsigned nr_samples,
-                         bool first_provoking_vertex, mali_ptr heap, void *out)
+                         bool first_provoking_vertex, mali_ptr heap,
+                         mali_ptr geom_buf, void *out)
 {
    unsigned max_levels = dev->tiler_features.max_levels;
    assert(max_levels >= 2);
@@ -988,7 +989,6 @@ GENX(pan_emit_tiler_ctx)(const struct panfrost_device *dev, unsigned fb_width,
       tiler.fb_width = fb_width;
       tiler.fb_height = fb_height;
       tiler.heap = heap;
-      tiler.heap = heap;
       tiler.sample_pattern = pan_sample_pattern(nr_samples);
 #if PAN_ARCH >= 9
       tiler.first_provoking_vertex = first_provoking_vertex;
@@ -1000,7 +1000,7 @@ GENX(pan_emit_tiler_ctx)(const struct panfrost_device *dev, unsigned fb_width,
        * Note: DDK assigns this pointer in the CS.
        */
 #define POSITION_FIFO_SIZE (64 * 1024)
-      tiler.geometry_buffer = (tiler.heap - POSITION_FIFO_SIZE);
+      tiler.geometry_buffer = geom_buf;
 #endif
    }
 }
diff --git a/src/panfrost/lib/pan_cs.h b/src/panfrost/lib/pan_cs.h
index cc161bf7bf5..dbc1707884e 100644
--- a/src/panfrost/lib/pan_cs.h
+++ b/src/panfrost/lib/pan_cs.h
@@ -171,7 +171,7 @@ void GENX(pan_emit_tiler_heap)(const struct panfrost_device *dev, void *out);
 void GENX(pan_emit_tiler_ctx)(const struct panfrost_device *dev,
                               unsigned fb_width, unsigned fb_height,
                               unsigned nr_samples, bool first_provoking_vertex,
-                              mali_ptr heap, void *out);
+                              mali_ptr heap, mali_ptr geom_buf, void *out);
 #endif
 
 #if PAN_ARCH <= 9
-- 
GitLab

