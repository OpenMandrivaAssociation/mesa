From fe5cbcbe5b635dc4c14d641097e4fa09830b9389 Mon Sep 17 00:00:00 2001
From: Erik Faye-Lund <erik.faye-lund@collabora.com>
Date: Wed, 5 Jul 2023 15:36:19 +0000
Subject: [PATCH] panvk: relegate bifrost stuff to bifrost struct in union

---
 .../vulkan/bifrost/panvk_vX_cmd_buffer.c      | 20 +++++++++----------
 src/panfrost/vulkan/bifrost/panvk_vX_cs.c     | 14 ++++++-------
 .../vulkan/bifrost/panvk_vX_pipeline.c        |  2 +-
 src/panfrost/vulkan/panvk_private.h           |  6 +++++-
 4 files changed, 23 insertions(+), 19 deletions(-)

diff --git a/src/panfrost/vulkan/bifrost/panvk_vX_cmd_buffer.c b/src/panfrost/vulkan/bifrost/panvk_vX_cmd_buffer.c
index 21a004c161d..a2060f889f8 100644
--- a/src/panfrost/vulkan/bifrost/panvk_vX_cmd_buffer.c
+++ b/src/panfrost/vulkan/bifrost/panvk_vX_cmd_buffer.c
@@ -256,15 +256,15 @@ panvk_cmd_prepare_push_constants(
    struct panvk_descriptor_state *desc_state = &bind_point_state->desc_state;
    const struct panvk_pipeline *pipeline = bind_point_state->pipeline;
 
-   if (!pipeline->layout->push_constants.size || desc_state->push_constants)
+   if (!pipeline->bifrost.layout->push_constants.size || desc_state->push_constants)
       return;
 
    struct panfrost_ptr push_constants = pan_pool_alloc_aligned(
       &cmdbuf->desc_pool.base,
-      ALIGN_POT(pipeline->layout->push_constants.size, 16), 16);
+      ALIGN_POT(pipeline->bifrost.layout->push_constants.size, 16), 16);
 
    memcpy(push_constants.cpu, cmdbuf->push_constants,
-          pipeline->layout->push_constants.size);
+          pipeline->bifrost.layout->push_constants.size);
    desc_state->push_constants = push_constants.gpu;
 }
 
@@ -295,7 +295,7 @@ panvk_cmd_prepare_textures(struct panvk_cmd_buffer *cmdbuf,
 {
    struct panvk_descriptor_state *desc_state = &bind_point_state->desc_state;
    const struct panvk_pipeline *pipeline = bind_point_state->pipeline;
-   unsigned num_textures = pipeline->layout->num_textures;
+   unsigned num_textures = pipeline->bifrost.layout->num_textures;
 
    if (!num_textures || desc_state->textures)
       return;
@@ -325,7 +325,7 @@ panvk_cmd_prepare_samplers(struct panvk_cmd_buffer *cmdbuf,
 {
    struct panvk_descriptor_state *desc_state = &bind_point_state->desc_state;
    const struct panvk_pipeline *pipeline = bind_point_state->pipeline;
-   unsigned num_samplers = pipeline->layout->num_samplers;
+   unsigned num_samplers = pipeline->bifrost.layout->num_samplers;
 
    if (!num_samplers || desc_state->samplers)
       return;
@@ -515,14 +515,14 @@ panvk_fill_non_vs_attribs(struct panvk_cmd_buffer *cmdbuf,
    struct panvk_descriptor_state *desc_state = &bind_point_state->desc_state;
    const struct panvk_pipeline *pipeline = bind_point_state->pipeline;
 
-   for (unsigned s = 0; s < pipeline->layout->num_sets; s++) {
+   for (unsigned s = 0; s < pipeline->bifrost.layout->num_sets; s++) {
       const struct panvk_descriptor_set *set = desc_state->sets[s];
 
       if (!set)
          continue;
 
       const struct panvk_descriptor_set_layout *layout = set->layout;
-      unsigned img_idx = pipeline->layout->sets[s].img_offset;
+      unsigned img_idx = pipeline->bifrost.layout->sets[s].img_offset;
       unsigned offset = img_idx * pan_size(ATTRIBUTE_BUFFER) * 2;
       unsigned size = layout->num_imgs * pan_size(ATTRIBUTE_BUFFER) * 2;
 
@@ -549,8 +549,8 @@ panvk_prepare_non_vs_attribs(struct panvk_cmd_buffer *cmdbuf,
    if (desc_state->non_vs_attribs || !pipeline->img_access_mask)
       return;
 
-   unsigned attrib_count = pipeline->layout->num_imgs;
-   unsigned attrib_buf_count = (pipeline->layout->num_imgs * 2);
+   unsigned attrib_count = pipeline->bifrost.layout->num_imgs;
+   unsigned attrib_buf_count = (pipeline->bifrost.layout->num_imgs * 2);
    struct panfrost_ptr bufs = pan_pool_alloc_desc_array(
       &cmdbuf->desc_pool.base, attrib_buf_count + 1, ATTRIBUTE_BUFFER);
    struct panfrost_ptr attribs = pan_pool_alloc_desc_array(
@@ -573,7 +573,7 @@ panvk_draw_prepare_vs_attribs(struct panvk_cmd_buffer *cmdbuf,
    const struct panvk_pipeline *pipeline = bind_point_state->pipeline;
    unsigned num_imgs =
       pipeline->img_access_mask & BITFIELD_BIT(MESA_SHADER_VERTEX)
-         ? pipeline->layout->num_imgs
+         ? pipeline->bifrost.layout->num_imgs
          : 0;
    unsigned attrib_count = pipeline->attribs.attrib_count + num_imgs;
 
diff --git a/src/panfrost/vulkan/bifrost/panvk_vX_cs.c b/src/panfrost/vulkan/bifrost/panvk_vX_cs.c
index db377b8f7ca..5e3c2a52f80 100644
--- a/src/panfrost/vulkan/bifrost/panvk_vX_cs.c
+++ b/src/panfrost/vulkan/bifrost/panvk_vX_cs.c
@@ -326,22 +326,22 @@ panvk_per_arch(emit_ubos)(const struct panvk_pipeline *pipeline,
    panvk_per_arch(emit_ubo)(state->sysvals_ptr, sizeof(state->sysvals),
                             &ubos[PANVK_SYSVAL_UBO_INDEX]);
 
-   if (pipeline->layout->push_constants.size) {
+   if (pipeline->bifrost.layout->push_constants.size) {
       panvk_per_arch(emit_ubo)(
          state->push_constants,
-         ALIGN_POT(pipeline->layout->push_constants.size, 16),
+         ALIGN_POT(pipeline->bifrost.layout->push_constants.size, 16),
          &ubos[PANVK_PUSH_CONST_UBO_INDEX]);
    } else {
       memset(&ubos[PANVK_PUSH_CONST_UBO_INDEX], 0, sizeof(*ubos));
    }
 
-   for (unsigned s = 0; s < pipeline->layout->vk.set_count; s++) {
+   for (unsigned s = 0; s < pipeline->bifrost.layout->vk.set_count; s++) {
       const struct panvk_descriptor_set_layout *set_layout =
-         vk_to_panvk_descriptor_set_layout(pipeline->layout->vk.set_layouts[s]);
+         vk_to_panvk_descriptor_set_layout(pipeline->bifrost.layout->vk.set_layouts[s]);
       const struct panvk_descriptor_set *set = state->sets[s];
 
       unsigned ubo_start =
-         panvk_pipeline_layout_ubo_start(pipeline->layout, s, false);
+         panvk_pipeline_layout_ubo_start(pipeline->bifrost.layout, s, false);
 
       if (!set) {
          unsigned all_ubos = set_layout->num_ubos + set_layout->num_dyn_ubos;
@@ -351,11 +351,11 @@ panvk_per_arch(emit_ubos)(const struct panvk_pipeline *pipeline,
                 set_layout->num_ubos * sizeof(*ubos));
 
          unsigned dyn_ubo_start =
-            panvk_pipeline_layout_ubo_start(pipeline->layout, s, true);
+            panvk_pipeline_layout_ubo_start(pipeline->bifrost.layout, s, true);
 
          for (unsigned i = 0; i < set_layout->num_dyn_ubos; i++) {
             const struct panvk_buffer_desc *bdesc =
-               &state->dyn.ubos[pipeline->layout->sets[s].dyn_ubo_offset + i];
+               &state->dyn.ubos[pipeline->bifrost.layout->sets[s].dyn_ubo_offset + i];
 
             mali_ptr address =
                panvk_buffer_gpu_ptr(bdesc->buffer, bdesc->offset);
diff --git a/src/panfrost/vulkan/bifrost/panvk_vX_pipeline.c b/src/panfrost/vulkan/bifrost/panvk_vX_pipeline.c
index 2ab35bba7a4..362bfeff879 100644
--- a/src/panfrost/vulkan/bifrost/panvk_vX_pipeline.c
+++ b/src/panfrost/vulkan/bifrost/panvk_vX_pipeline.c
@@ -81,7 +81,7 @@ panvk_pipeline_builder_create_pipeline(struct panvk_pipeline_builder *builder,
    if (!pipeline)
       return VK_ERROR_OUT_OF_HOST_MEMORY;
 
-   pipeline->layout = builder->layout;
+   pipeline->bifrost.layout = builder->layout;
    *out_pipeline = pipeline;
    return VK_SUCCESS;
 }
diff --git a/src/panfrost/vulkan/panvk_private.h b/src/panfrost/vulkan/panvk_private.h
index 3dc6f33fc7d..eb01c491ad8 100644
--- a/src/panfrost/vulkan/panvk_private.h
+++ b/src/panfrost/vulkan/panvk_private.h
@@ -753,7 +753,11 @@ struct panvk_pipeline {
    struct panvk_varyings_info varyings;
    struct panvk_attribs_info attribs;
 
-   const struct panvk_pipeline_layout *layout;
+   union {
+      struct {
+         const struct panvk_pipeline_layout *layout;
+      } bifrost;
+   };
 
    unsigned active_stages;
 
-- 
GitLab

